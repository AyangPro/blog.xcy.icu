import{_ as p,W as l,X as o,Y as c,Z as n,$ as a,a1 as t,a0 as e,C as i}from"./framework-91490e6a.js";const u={},r=n("p",null,[n("code",null,"more"),a(" 本文章主要介绍Spring框架整体架构，Spring的核心IOC，AOP的案例和具体实现机制；以及SpringMVC框架的案例和实现机制。")],-1),d=e('<h1 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud" aria-hidden="true">#</a> SpringCloud</h1><h2 id="一、服务注册中心" tabindex="-1"><a class="header-anchor" href="#一、服务注册中心" aria-hidden="true">#</a> 一、服务注册中心</h2><h3 id="_1、eureka服务注册与发现" tabindex="-1"><a class="header-anchor" href="#_1、eureka服务注册与发现" aria-hidden="true">#</a> 1、Eureka服务注册与发现</h3><p><strong>什么是服务治理？</strong></p><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来<strong>实现服务治理</strong></p><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><p><strong>什么是服务注册与发现？</strong></p><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息 比如 服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p><p>下左图是Eureka系统架构，右图是Dubbo的架构，请对比</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422122541585.png" alt="image-20230422122541585" tabindex="0" loading="lazy"><figcaption>image-20230422122541585</figcaption></figure><p><strong>Eureka的两个组件</strong></p><p><strong>Eureka Server提供服务注册服务</strong></p><p>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><p><strong>EurekaClient通过注册中心进行访问</strong></p><p>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p><h3 id="_2、单机构建eureka" tabindex="-1"><a class="header-anchor" href="#_2、单机构建eureka" aria-hidden="true">#</a> 2、单机构建Eureka</h3>',17),k=e(`<li><p>构建module：cloud-eureka-server7001</p></li><li><p>该pom文件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mscloud03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-eureka-server7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--eureka-server--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--boot web actuator--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--一般通用配置--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>写yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment">#false表示不向注册中心注册自己。</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
    <span class="token comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>主启动</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain7001</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaMain7001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,4),m={href:"http://localhost:7001/%E7%AB%AF%E5%8F%A3%EF%BC%8C%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C",target:"_blank",rel:"noopener noreferrer"},g=e(`<figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422140900157.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果出现以上的spring Eureka页面，表示成功，但是因为还没有服务注册进来，所以没有服务被发现</p><p>接下来创建cloud-provider-payment8001模块</p><p>在其pom文件中添加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--eureka-client--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后再yml文件中进行配置，将cloud-provider-payment8001注册到eureka服务中</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka</span><span class="token punctuation">:</span>
<span class="token key attr-name">  client</span><span class="token punctuation">:</span>
<span class="token comment">    #表示是否将自己注册进EurekaServer默认为true。</span>
<span class="token key attr-name">    register-with-eureka</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span>
<span class="token comment">    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>
<span class="token key attr-name">    fetchRegistry</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">    service-url</span><span class="token punctuation">:</span>
<span class="token key attr-name">      defaultZone</span><span class="token punctuation">:</span> <span class="token value attr-value">http://localhost:7001/eureka</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422151135002.png" alt="image-20230422151135002" tabindex="0" loading="lazy"><figcaption>image-20230422151135002</figcaption></figure><p>注册后进行启动，在上图中看到application中有了一个cloud-payment-service就表示注册成功</p><h3 id="_3、eureka集群原理" tabindex="-1"><a class="header-anchor" href="#_3、eureka集群原理" aria-hidden="true">#</a> 3、Eureka集群原理</h3><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422154457389.png" alt="image-20230422154457389" tabindex="0" loading="lazy"><figcaption>image-20230422154457389</figcaption></figure><p><strong>微服务RPC远程服务调用最核心</strong>的是<mark>高可用</mark>，如果注册中心，只有一个，但是它一旦出故障，会导致整个服务环境不可用</p><p>解决办法：搭建Eureka注册中心集群，实现<mark>负载均衡+故障容错</mark></p><h3 id="_4、eureka集群环境构建" tabindex="-1"><a class="header-anchor" href="#_4、eureka集群环境构建" aria-hidden="true">#</a> 4、Eureka集群环境构建</h3>`,14),v=n("li",null,[n("p",null,"新建模块cloud-eureka-server7002")],-1),b=n("li",null,[n("p",null,"参考cloud-eureka-server7001重新改pom文件")],-1),h=n("p",null,"修改映射配置",-1),y=n("p",null,"修改找到C:\\Windows\\System32\\drivers\\etc\\hosts文件，在其中添加",-1),f={href:"http://eureka7001.com",target:"_blank",rel:"noopener noreferrer"},S={href:"http://eureka7002.com",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>在yml配置文件中修改配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com <span class="token comment">#eureka服务端的实例名称</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment">#false表示不向注册中心注册自己。</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),x={href:"http://eureka7002.com:7002/eureka/%E8%A1%A8%E7%A4%BAcloud-eureka-server7001%E5%AE%88%E6%9C%9Bcloud-eureka-server7002%EF%BC%8C%E5%9C%A87cloud-eureka-server7002%E4%B8%AD%E5%BA%94%E8%AF%A5%E5%B0%86%E5%85%B6%E6%94%B9%E4%B8%BAhttp://eureka7001.com:7001/eureka/%EF%BC%8C%E8%A1%A8%E7%A4%BA7002%E5%AE%88%E6%9C%9Bcloud-eureka-server7001",target:"_blank",rel:"noopener noreferrer"},_=e(`<li><p>修改cloud-provider-payment8001模块yml配置文件中的eureka配置修改为：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment">#false表示不向注册中心注册自己。</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span>
      <span class="token comment">#defaultZone: http://localhost:7001/eureka                                          # 单机版</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/  <span class="token comment"># 集群版</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动所有所有模块，查看结果</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422162914858.png" alt="image-20230422162914858" tabindex="0" loading="lazy"><figcaption>image-20230422162914858</figcaption></figure></li><li><p>创建cloud-provider-payment8002模块，使其保持和cloud-provider-payment8001保持一致</p><ul><li><p>修改cloud-consumer-order80中的Controller</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PAYMENT_URL</span> <span class="token operator">=</span> <span class="token string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/create&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Payment</span> payment<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token constant">PAYMENT_URL</span> <span class="token operator">+</span> <span class="token string">&quot;/payment/create&quot;</span><span class="token punctuation">,</span> payment<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/getPayment/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token constant">PAYMENT_URL</span> <span class="token operator">+</span> <span class="token string">&quot;/payment/getPaymentById/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在ApplicationContextConfig中添加注解@LoadBalanced开启负载均衡，轮训各个服务</p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,3),E=e(`<h3 id="_5、服务发现discovery" tabindex="-1"><a class="header-anchor" href="#_5、服务发现discovery" aria-hidden="true">#</a> 5、服务发现Discovery</h3><p>对于注册进eureka里面的微服务，可以通过微服务发现来获得该服务的信息</p><p>修改cloud-provider-payment8001的Controller</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/payment/discovery&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> element <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> element <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span>
                <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discoveryClient<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改主启动类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">//服务发现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、eureka自我保护机制" tabindex="-1"><a class="header-anchor" href="#_5、eureka自我保护机制" aria-hidden="true">#</a> 5、Eureka自我保护机制</h3><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h4><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式， Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式： EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/Eureka的自我保护机制.png" alt="Eureka的自我保护机制" tabindex="0" loading="lazy"><figcaption>Eureka的自我保护机制</figcaption></figure><p><strong>为什么会产生Eureka自我保护机制？</strong> 为了防止EurekaClient可以正常运行，但是 与 EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除</p><p><strong>什么是自我保护模式？</strong> 默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230422195535625.png" alt="image-20230422195535625" tabindex="0" loading="lazy"><figcaption>image-20230422195535625</figcaption></figure><p>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。 它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><h2 id="二、zookeeper服务注册与发现" tabindex="-1"><a class="header-anchor" href="#二、zookeeper服务注册与发现" aria-hidden="true">#</a> 二、Zookeeper服务注册与发现</h2><p>因为Eureka已经停止更新了，所以SpringCloud整合了Zookeeper代替Eureka</p><h3 id="_1、注册中心zookeeper" tabindex="-1"><a class="header-anchor" href="#_1、注册中心zookeeper" aria-hidden="true">#</a> 1、注册中心Zookeeper</h3><p>注册中心Zookeeper是一个分布式协调工具，可以实现注册中心功能</p><p>关闭Linux服务器防火墙后启动Zookeeper服务器</p><p>zookeeper服务器取代Eureka服务器，zk作为服务注册中心</p><h3 id="_2、服务提供者" tabindex="-1"><a class="header-anchor" href="#_2、服务提供者" aria-hidden="true">#</a> 2、服务提供者</h3><h3 id="_3、服务消费者" tabindex="-1"><a class="header-anchor" href="#_3、服务消费者" aria-hidden="true">#</a> 3、服务消费者</h3><h2 id="三、consul服务注册与发现" tabindex="-1"><a class="header-anchor" href="#三、consul服务注册与发现" aria-hidden="true">#</a> 三、Consul服务注册与发现</h2><h2 id="四、ribbon负载均衡服务调用" tabindex="-1"><a class="header-anchor" href="#四、ribbon负载均衡服务调用" aria-hidden="true">#</a> 四、Ribbon负载均衡服务调用</h2><h2 id="五、openfeign服务接口调用" tabindex="-1"><a class="header-anchor" href="#五、openfeign服务接口调用" aria-hidden="true">#</a> 五、OpenFeign服务接口调用</h2><h2 id="六、hystrix断路器" tabindex="-1"><a class="header-anchor" href="#六、hystrix断路器" aria-hidden="true">#</a> 六、Hystrix断路器</h2><h2 id="七、zuul路由网关" tabindex="-1"><a class="header-anchor" href="#七、zuul路由网关" aria-hidden="true">#</a> 七、zuul路由网关</h2><h2 id="八、gateway网关" tabindex="-1"><a class="header-anchor" href="#八、gateway网关" aria-hidden="true">#</a> 八、GateWay网关</h2>`,30),w={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。 Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。 Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p><p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，基于 Spring 5.0+Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p>Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><p>SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。</p><p>架构图：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/GateWay网关架构图.png" alt="GateWay网关架构图" tabindex="0" loading="lazy"><figcaption>GateWay网关架构图</figcaption></figure><p>作用：</p><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li><li>等等</li></ul><p>微服务架构中网关在哪里？</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/微服务中网关的位置.png" alt="微服务中网关的位置" tabindex="0" loading="lazy"><figcaption>微服务中网关的位置</figcaption></figure><h3 id="_2、三大核心概念" tabindex="-1"><a class="header-anchor" href="#_2、三大核心概念" aria-hidden="true">#</a> 2、三大核心概念</h3><ul><li><p>Rotute（路由）：路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p></li><li><p>Predicate（断言）：参考的是Java8的java.util.function.Predicate 开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，<code>如果请求与断言相匹配则进行路由</code></p></li><li><p>Filter（过滤）：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p></li></ul><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/GateWay三大核心概念总体.png" alt="GateWay三大核心概念总体" tabindex="0" loading="lazy"><figcaption>GateWay三大核心概念总体</figcaption></figure><p>总体：web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。 predicate就是我们的匹配条件；而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</p><h3 id="_3、gateway工作流程" tabindex="-1"><a class="header-anchor" href="#_3、gateway工作流程" aria-hidden="true">#</a> 3、GateWay工作流程</h3><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/GateWay工作流程.png" alt="GateWay工作流程" tabindex="0" loading="lazy"><figcaption>GateWay工作流程</figcaption></figure><p>核心逻辑：<code>路由转发+执行过滤器链</code></p><h3 id="_4、入门配置" tabindex="-1"><a class="header-anchor" href="#_4、入门配置" aria-hidden="true">#</a> 4、入门配置</h3><p>引入maven依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--gateway--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写yml配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> 
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#payment_route   #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>          <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route  #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>          <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#服务提供者provider注册进eureka服务列表内</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问说明：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/GateWay访问说明.png" alt="GateWay访问说明" tabindex="0" loading="lazy"><figcaption>GateWay访问说明</figcaption></figure>`,27),R={href:"http://localhost:9527/%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>GateWay还具有另一种配置方式，就是在代码中注入RouteLocator的Bean</p><p>官网中是这么写的</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/GateWay代码注入配置方式.png" alt="GateWay代码注入配置方式" tabindex="0" loading="lazy"><figcaption>GateWay代码注入配置方式</figcaption></figure><p>示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayConfig</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 配置了一个id为route-name的路由规则，
     * 当访问地址 http://localhost:9527/guonei时会自动转发到地址：http://news.baidu.com/guonei
     * <span class="token keyword">@param</span> <span class="token parameter">builder</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;path_route_atguigu&quot;</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;/guonei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://news.baidu.com/guonei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator2</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;path_route_atguigu2&quot;</span><span class="token punctuation">,</span> r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;/guoji&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://news.baidu.com/guoji&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、通过微服务名实现动态路由" tabindex="-1"><a class="header-anchor" href="#_5、通过微服务名实现动态路由" aria-hidden="true">#</a> 5、通过微服务名实现动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建<mark>动态路由进行转发，从而实现动态路由的功能</mark></p><p>我们可以通过修改yml文件即可完成实现动态路由：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#payment_route  #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route  #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#服务提供者provider注册进eureka服务列表内</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),B={href:"http://localhost:9527",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="_6、predicate的使用" tabindex="-1"><a class="header-anchor" href="#_6、predicate的使用" aria-hidden="true">#</a> 6、Predicate的使用</h3><p>Predicate是什么？</p><p>在启动gateway的时候，我们可以在启动的日志中看到如下的信息：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/项目启动打印的gateway信息.png" alt="项目启动打印的gateway信息" tabindex="0" loading="lazy"><figcaption>项目启动打印的gateway信息</figcaption></figure><p>Route Predicate Factories在官网上是这么说的：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/Route Predicate Factories.png" alt="Route Predicate Factories" tabindex="0" loading="lazy"><figcaption>Route Predicate Factories</figcaption></figure><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个Route Predicate工厂可以进行组合</p><p>而常用的<mark>常用的Route Predicate</mark>有：</p><ul><li>After Route Predicate</li><li>Before Route Predicate</li><li>Between Route Predicate</li><li>Cookie Route Predicate</li><li>Header Route Predicate</li><li>Host Route Predicate</li><li>Method Route Predicate</li><li>Path Route Predicate</li><li>Query Route Predicate</li></ul><p>可以在yml配置文件中进行配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">locator</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启从注册中心动态创建路由的功能</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>

        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>
          <span class="token comment"># uri: http://localhost:8001          #匹配后提供服务的路由地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>
            <span class="token punctuation">-</span> After=2020<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05T15<span class="token punctuation">:</span>10<span class="token punctuation">:</span>03.685+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>
            <span class="token comment">#- Before=2020-02-05T15:10:03.685+08:00[Asia/Shanghai]         # 断言，路径相匹配的进行路由</span>
            <span class="token comment">#- Between=2020-02-02T17:45:06.206+08:00[Asia/Shanghai],2020-03-25T18:59:06.206+08:00[Asia/Shanghai]</span>
            <span class="token comment">#- Cookie=username,zzyy</span>
            <span class="token comment">#- Header=X-Request-Id, \\d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span>
            <span class="token comment">#- Host=**.atguigu.com</span>
            <span class="token punctuation">-</span> Method=GET
            <span class="token punctuation">-</span> Query=username<span class="token punctuation">,</span> \\d+  <span class="token comment"># 要有参数名username并且值还要是整数才能路由</span>

<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service
  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#服务提供者provider注册进eureka服务列表内</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka
<span class="token comment">#id：我们自定义的路由 ID，保持唯一</span>
 <span class="token comment">##uri：目标服务地址</span>
 <span class="token comment">##predicates：路由条件，Predicate接受一个输入参数返回一个布尔值。</span>
 <span class="token comment">##            该属性包含多种默认方法来将Predicate组合成其他复杂的逻辑(比如：与，或，非)</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说白了，Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p><h3 id="_7、filter的使用" tabindex="-1"><a class="header-anchor" href="#_7、filter的使用" aria-hidden="true">#</a> 7、Filter的使用</h3><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/Gateway中的Filter概述.png" alt="Gateway中的Filter概述" tabindex="0" loading="lazy"><figcaption>Gateway中的Filter概述</figcaption></figure><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生</p><p>Spring Cloud Gateway的Filter有两种生命周期，分别是pre和post。同时有两种种类，一种是单个过滤器GatewayFilter，另一种是全局过滤器GlobalFilter</p><p>但一般开发中更习惯采用自定义的全局网关进行过滤以结合实际的业务需求去完成过滤</p><h4 id="自定义全局网关" tabindex="-1"><a class="header-anchor" href="#自定义全局网关" aria-hidden="true">#</a> 自定义全局网关</h4><p>创建全局GateWayFilter，让其实现GlobalFilter, Ordered两个接口，在两个实现类中进行操作，我们可以在其中进行全局日志记录，统一网关鉴权等各种操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取请求头或者参数</span>
        <span class="token class-name">String</span> requestHeader <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;X-Requested-With&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//不满足条件，进行操作返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;无X-Request-params&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//满足条件放行</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、springcloud-config分布式配置中心" tabindex="-1"><a class="header-anchor" href="#九、springcloud-config分布式配置中心" aria-hidden="true">#</a> 九、SpringCloud Config分布式配置中心</h2><h3 id="_1、概述-1" tabindex="-1"><a class="header-anchor" href="#_1、概述-1" aria-hidden="true">#</a> 1、概述</h3>`,22),j={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>微服务意味着要将单体应用中的义务拆分成一个个子服务，每个服务的粒度相对较少，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带一个application.yml，上百个配置文件的管理就会非常繁琐</p><p><strong>SpringCloud Config是什么？</strong></p><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong>。</p><p>SpringCloud Config分为<strong>服务端和客户端两部分</strong>。</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/SpringCloud Config Server.png" alt="SpringCloud Config Server" tabindex="0" loading="lazy"><figcaption>SpringCloud Config Server</figcaption></figure><p>服务端也称为<strong>分布式配置中心，它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><p>SpringCloud Config的作用</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署，比如：dev/test/prod/beta/release</li><li>运行期间动态调整，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉去配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用到新的配置</li><li>将配置信息以REST接口的形式暴露：post、curl访问刷新均可......</li></ul><p>与github整合配置</p><p>由于SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)， 但最推荐的还是Git，而且使用的是http/https访问的形式</p><h3 id="_2、config服务端配置" tabindex="-1"><a class="header-anchor" href="#_2、config服务端配置" aria-hidden="true">#</a> 2、Config服务端配置</h3><p>在Spring中yml配置文件配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span>  cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment">#注册进Eureka服务器的微服务名</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>zzyybs/springcloud<span class="token punctuation">-</span>config.git <span class="token comment">#GitHub上面的git仓库名字</span>
        <span class="token comment">####搜索目录</span>
          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config
      <span class="token comment">####读取分支</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置读取规则在官网上是这么说的</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/SpringCloud Config配置读取规则.png" alt="SpringCloud Config配置读取规则" tabindex="0" loading="lazy"><figcaption>SpringCloud Config配置读取规则</figcaption></figure><p><mark>/{label}/{application}-{profile}.yml</mark></p><p>其中：label：分支(branch)；name ：服务名；profiles：环境(dev/test/prod)</p><p>示例如下：</p>`,20),M=n("p",null,"master分支",-1),G={href:"http://config-3344.com:3344/master/config-dev.yml",target:"_blank",rel:"noopener noreferrer"},T={href:"http://config-3344.com:3344/master/config-test.yml",target:"_blank",rel:"noopener noreferrer"},z={href:"http://config-3344.com:3344/master/config-prod.yml",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,"dev分支：",-1),L={href:"http://config-3344.com:3344/dev/config-dev.yml",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://config-3344.com:3344/dev/config-test.yml",target:"_blank",rel:"noopener noreferrer"},N={href:"http://config-3344.com:3344/dev/config-prod.yml",target:"_blank",rel:"noopener noreferrer"},W={href:"http://config-3344.com:3344/config/dev/master",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"注意：如果是通过逆操作读取到的，返回的结果将是一串json格式的数据，需要我们自己操作进行读取数据",-1),O=e(`<h3 id="_3、config客户端配置" tabindex="-1"><a class="header-anchor" href="#_3、config客户端配置" aria-hidden="true">#</a> 3、Config客户端配置</h3><p>在客户端需要加入一个新的yml文件，<mark>bootstrap.yml</mark></p><p><strong>bootstrap.yml是什么？</strong></p><p>applicaiton.yml是用户级的资源配置项 bootstrap.yml是系统级的，优先级更加高</p><p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p><p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p><p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的， 因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p><p>在bootstrap.yml配置文件中加入</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token comment">#Config客户端配置</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址k</span>

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/SpringCloud Config客户端bootstrap.yml说明.png" alt="SpringCloud Config客户端bootstrap.yml说明" tabindex="0" loading="lazy"><figcaption>SpringCloud Config客户端bootstrap.yml说明</figcaption></figure><p>但是这种配置依然有一个缺陷，就是刷新问题，如果服务端更新了配置，那么服务就必须重启才会生效，如果是已经部署上线的程序呢？这就会变的很麻烦。</p><p><strong>分布式配置的动态刷新问题</strong></p><ul><li>Linux运维修改GitHub上的配置文件内容做调整</li><li>刷新3344，发现ConfigServer配置中心立刻响应</li><li>刷新3355，发现ConfigClient客户端没有任何响应</li><li>3355没有变化除非自己重启或者重新加载</li><li>难到每次运维修改配置文件，客户端都需要重启？？噩梦</li></ul><h3 id="_4、config客户端动态刷新" tabindex="-1"><a class="header-anchor" href="#_4、config客户端动态刷新" aria-hidden="true">#</a> 4、Config客户端动态刷新</h3><p>pom文件中加入actuator监控</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改yml文件，暴露监控端口</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token comment">#Config客户端配置</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址k</span>

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
<span class="token comment"># 暴露监控端点</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Controller类上加入@RefreshScope注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${config.info}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/configInfo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时就可以实现动态刷新了，但是刷新是手动版的刷新，也就是说我们必须要给客户端服务发送一个post请求，告知服务我们的配置已经更改了，让服务完成刷新。这种手动版的对于服务器少的倒是可以接受，但是如果说是我们的服务器比较多，而且还是具有针对性的服务需要刷新，这种时候就难以适用了。</p><h2 id="十、springcloud-bus消息总线" tabindex="-1"><a class="header-anchor" href="#十、springcloud-bus消息总线" aria-hidden="true">#</a> 十、SpringCloud Bus消息总线</h2><h3 id="_1、概述-2" tabindex="-1"><a class="header-anchor" href="#_1、概述-2" aria-hidden="true">#</a> 1、概述</h3><p>Bus可以分布式实现自动刷新配置功能，也就是SpringCloud Bus配合SpringCloud Config使用可以实现配置的动态刷新，Bus可以通过RabbitMQ和Kafka两种消息代理实现配置的动态刷新。</p><p>通过消息中间件实现全局通知：</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/SpringCloud Bus 配合SpringCloud Config使用可以实现配置的动态刷新.png" alt="SpringCloud Bus配合SpringCloud Config使用可以实现配置的动态刷新" tabindex="0" loading="lazy"><figcaption>SpringCloud Bus配合SpringCloud Config使用可以实现配置的动态刷新</figcaption></figure><p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。Spring Clud Bus目前支持RabbitMQ和Kafka。</p><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/SpringCloud Bus管理和传播分布式系统间的消息.png" alt="SpringCloud Bus管理和传播分布式系统间的消息" tabindex="0" loading="lazy"><figcaption>SpringCloud Bus管理和传播分布式系统间的消息</figcaption></figure><p><strong>什么是总线？</strong> 在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p><p><strong>基本原理？</strong> ConfigClient实例都监听MQ中同一个topic(默认是springCloudBus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h3 id="_2、bus之rabbitmq环境配置" tabindex="-1"><a class="header-anchor" href="#_2、bus之rabbitmq环境配置" aria-hidden="true">#</a> 2、Bus之RabbitMQ环境配置</h3>`,33),Z={href:"http://erlang.org/download/otp_win64_21.3.exe",target:"_blank",rel:"noopener noreferrer"},D={href:"https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"RabbitMQ装有可视化插件，进入RabbitMQ安装目录下的sbin目录，输入以下命令启动管理功能：",-1),V=n("p",null,"rabbitmq-plugins enable rabbitmq_management",-1),Y={href:"http://localhost:15672/%E6%9F%A5%E7%9C%8BRabbitMQ%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%EF%BC%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%B8%8B%E3%80%82",target:"_blank",rel:"noopener noreferrer"},K=e(`<figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/RabbitMQ登录.png" alt="RabbitMQ登录" tabindex="0" loading="lazy"><figcaption>RabbitMQ登录</figcaption></figure><p>之后输入账号密码，guest，guest，就可以登录成功。</p><h3 id="_3、springcloud-bus动态刷新全局广播" tabindex="-1"><a class="header-anchor" href="#_3、springcloud-bus动态刷新全局广播" aria-hidden="true">#</a> 3、SpringCloud Bus动态刷新全局广播</h3><p>启动好RabbitMQ环境</p><p><strong>设计思想：</strong></p><ul><li>利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置</li></ul><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230606212012633.png" alt="消息总线触发一个客户端图一" tabindex="0" loading="lazy"><figcaption>消息总线触发一个客户端图一</figcaption></figure><ul><li>利用消息总线触发一个服务端ConfigServer的/bus/refresh端点，而刷新所有客户端的配置</li></ul><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230606212501053.png" alt="消息总线触发一个客户端图二" tabindex="0" loading="lazy"><figcaption>消息总线触发一个客户端图二</figcaption></figure><p>图二的架构显然更加适合，图一不适合的原因如下</p><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li><li>破坏了微服务各节点的对等性。</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li></ul><p><strong>给配置中心<mark>服务端</mark>添加消息总线支持</strong></p><p>加入maven依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如yml配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span>  cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment">#注册进Eureka服务器的微服务名</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">git</span><span class="token punctuation">:</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>zzyybs/springcloud<span class="token punctuation">-</span>config.git <span class="token comment">#GitHub上面的git仓库名字</span>
        <span class="token comment">####搜索目录</span>
          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config
      <span class="token comment">####读取分支</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master
<span class="token comment">#rabbitmq相关配置</span>
<span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka

<span class="token comment">##rabbitmq相关配置,暴露bus刷新配置的端点</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span> <span class="token comment">#暴露bus刷新配置的端点</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&#39;bus-refresh&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给<mark>客户端</mark>添加消息总线支持</strong></p><p>加入maven依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token comment">#Config客户端配置</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址k</span>
<span class="token comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
<span class="token comment"># 暴露监控端点</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>   <span class="token comment"># &#39;refresh&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>给<mark>另一台客户端</mark>添加消息总线支持</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改yml文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3366</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token comment">#Config客户端配置</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>
      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取</span>
      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址k</span>
<span class="token comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest
    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest

<span class="token comment">#服务注册到eureka地址</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka
<span class="token comment"># 暴露监控端点</span>
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>   <span class="token comment"># &#39;refresh&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运维工程师可以在远程配置文件中进行修改，然后发送给服务器一个post请求，配置中心和客户端都会完成刷新</p><h3 id="_4、springcloud-bus动态刷新定点通知" tabindex="-1"><a class="header-anchor" href="#_4、springcloud-bus动态刷新定点通知" aria-hidden="true">#</a> 4、SpringCloud Bus动态刷新定点通知</h3><p>有时候我们在进行修改了一些配置后，只想要个别的实例生效，而不是针对全部生效，这时候就需要用到定点通知了。</p><p>我们个可以通过一个公式来完成定点刷新：</p>`,29),X=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"h"),n("mi",null,"t"),n("mi",null,"t"),n("mi",null,"p"),n("mo",null,":"),n("mi",{mathvariant:"normal"},"/"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"l"),n("mi",null,"h"),n("mi",null,"o"),n("mi",null,"s"),n("mi",null,"t"),n("mo",null,":"),n("mtext",null,"配置中心的端口号"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"a"),n("mi",null,"c"),n("mi",null,"t"),n("mi",null,"u"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"o"),n("mi",null,"r"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"b"),n("mi",null,"u"),n("mi",null,"s"),n("mo",null,"−"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"h"),n("mi",{mathvariant:"normal"},"/"),n("mrow",null,[n("mi",null,"d"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"}," http://localhost:配置中心的端口号/actuator/bus-refresh/{destination} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord mathnormal"},"ttp"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"//"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"oc"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord mathnormal"},"os"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord cjk_fallback"},"配置中心的端口号"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"re"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"res"),n("span",{class:"mord mathnormal"},"h"),n("span",{class:"mord"},"/"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"es"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"ina"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n")])])])])])],-1),$=e('<p>这样/bus/refresh请求就不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例了</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230606214342782.png" alt="Bus通知总结" tabindex="0" loading="lazy"><figcaption>Bus通知总结</figcaption></figure><h2 id="十一、springcloud-stream消息驱动" tabindex="-1"><a class="header-anchor" href="#十一、springcloud-stream消息驱动" aria-hidden="true">#</a> 十一、SpringCloud Stream消息驱动</h2><p>在实际开发之中，我们会需要很多的消息中间件，比如说ActiveMQ、RabbitMQ、RocketMQ、Kafka等。但是我们学会了一种MQ，到了公司发现用的是其他的MQ，这无疑是给开发人员增加了学习成本。因此我们需要一种新的技术，让开发人员不再关注具体的MQ细节，我们只需要使用一种适配绑定的方式，自动给我们在各种MQ内切换。</p><h3 id="_1、概述-3" tabindex="-1"><a class="header-anchor" href="#_1、概述-3" aria-hidden="true">#</a> 1、概述</h3><p><strong>SpringCloud Stream可以屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</strong></p><p>官方定义 Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p><p>应用程序通过 inputs 或者 outputs 来与 Spring Cloud Stream中binder对象交互。 通过我们配置来binding(绑定) ，而 Spring Cloud Stream 的 binder对象负责与消息中间件交互。 所以，我们只需要搞清楚如何与 Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p><p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。 Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p><p>目前仅支持RabbitMQ、Kafka。</p><p>官网：</p>',11),J={href:"https://spring.io/projects/spring-cloud-stream#overview",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://m.wang1314.com/doc/wepapp/topic/20971999.html",target:"_blank",rel:"noopener noreferrer"},sn=e('<p>Spring Cloud Stream是用于构建与共享消息传递系统连接的高度可伸缩的事件驱动微服务框架，该框架提供了一个灵活的编程模型，它建立在已经建立和熟悉的Spring熟语和最佳实践上，包括支持持久化的发布/订阅、消费组以及消息分区这三个核心概念</p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230617110619720.png" alt="image-20230617110619720" tabindex="0" loading="lazy"><figcaption>image-20230617110619720</figcaption></figure><p><strong>设计思想：</strong></p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230617105101555.png" alt="image-20230617105101555" tabindex="0" loading="lazy"><figcaption>image-20230617105101555</figcaption></figure><ul><li>标准MQ <ul><li>生产者/消费者之间靠消息媒介传递信息内容：Message</li><li>消息必须走特定的通道：消息通道MessageChannel</li><li>消息通道里的消息如何被消费呢，谁负责收发处理：消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅</li></ul></li></ul><p><strong>使用Cloud Stream原因：</strong></p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/无标题.png" alt="无标题" tabindex="0" loading="lazy"><figcaption>无标题</figcaption></figure><p>比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic和Partitions分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，<mark>一大堆东西都要重新推倒重新做</mark>，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了一种解耦合的方式。</p><ul><li><p>stream凭什么可以统一差异？</p><p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性通过定义绑定器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</p><p><mark>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</mark></p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230617105633513.png" alt="image-20230617105633513" tabindex="0" loading="lazy"><figcaption>image-20230617105633513</figcaption></figure></li><li><p><mark>Binder</mark></p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230617105945547.png" alt="SpringCloudStream处理架构" tabindex="0" loading="lazy"><figcaption>SpringCloudStream处理架构</figcaption></figure><p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性，通过定义绑定器作为中间层，==完美地实现了应用程序与消息中间件细节之间的隔离。==Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的切换中间件(rabbitmq切换为kafka)，使得微服务开发的高度解耦，服务可以关注更多自己的业务流程</p><p><mark>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</mark></p><p>Binder可以生成Binding，Binding用来绑定消息容器的生产者和消费者，它有两种类型，INPUT和OUTPUT，INPUT对应于消费者，OUTPUT对应于生产者。</p><p>Stream中的消息通信方式遵循了发布-订阅模式：Topic主题进行广播</p><ul><li>在RabbitMQ就是Exchange</li><li>在Kakfa中就是Topic</li></ul><h4 id="spring-cloud-stream标准流程套路" tabindex="-1"><a class="header-anchor" href="#spring-cloud-stream标准流程套路" aria-hidden="true">#</a> Spring Cloud Stream标准流程套路</h4><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/Spring Cloud Stream标准流程套路.png" alt="Spring Cloud Stream标准流程套路" tabindex="0" loading="lazy"><figcaption>Spring Cloud Stream标准流程套路</figcaption></figure><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230618215733401.png" alt="image-20230618215733401" tabindex="0" loading="lazy"><figcaption>image-20230618215733401</figcaption></figure></li></ul><p>**Binder：**很方便的连接中间件，屏蔽差异</p><p>**Channel：**通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p><p>**Source和Sink：**简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</p><p><strong>编码API和常用注解：</strong></p><figure><img src="https://xcy-fcblog-1304336794.cos.ap-nanjing.myqcloud.com/posts/SpringCloud/image-20230618220351473.png" alt="编码API和常用注解" tabindex="0" loading="lazy"><figcaption>编码API和常用注解</figcaption></figure><h2 id="十二、springcloud-sleuth分布式请求链路跟踪" tabindex="-1"><a class="header-anchor" href="#十二、springcloud-sleuth分布式请求链路跟踪" aria-hidden="true">#</a> 十二、SpringCloud Sleuth分布式请求链路跟踪</h2><h3 id="_1、概述-4" tabindex="-1"><a class="header-anchor" href="#_1、概述-4" aria-hidden="true">#</a> 1、概述</h3>',16);function tn(en,pn){const s=i("ExternalLinkIcon");return l(),o("div",null,[r,c(" more "),d,n("ul",null,[k,n("li",null,[n("p",null,[a("启动项目，进入"),n("a",m,[a("http://localhost:7001/端口，查看结果"),t(s)])])])]),g,n("ul",null,[v,b,n("li",null,[h,n("ul",null,[n("li",null,[y,n("blockquote",null,[n("p",null,[a("127.0.0.1 "),n("a",f,[a("eureka7001.com"),t(s)])]),n("p",null,[a("127.0.0.1 "),n("a",S,[a("eureka7002.com"),t(s)])])])])])]),n("li",null,[C,n("p",null,[a("其中defaultZone中的"),n("a",x,[a("http://eureka7002.com:7002/eureka/表示cloud-eureka-server7001守望cloud-eureka-server7002，在7cloud-eureka-server7002中应该将其改为http://eureka7001.com:7001/eureka/，表示7002守望cloud-eureka-server7001"),t(s)])])]),_]),E,n("p",null,[a("官网："),n("a",w,[a("https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/"),t(s)])]),q,n("p",null,[a("添加网关后可通过"),n("a",R,[a("http://localhost:9527/进行服务访问"),t(s)])]),I,n("p",null,[a("配置完成后，可以通过"),n("a",B,[a("http://localhost:9527"),t(s)]),a(" + 接口路径访问测试")]),A,n("p",null,[a("官网："),n("a",j,[a("https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/"),t(s)])]),P,n("ul",null,[n("li",null,[M,n("ul",null,[n("li",null,[n("a",G,[a("http://config-3344.com:3344/master/config-dev.yml"),t(s)])]),n("li",null,[n("a",T,[a("http://config-3344.com:3344/master/config-test.yml"),t(s)])]),n("li",null,[n("a",z,[a("http://config-3344.com:3344/master/config-prod.yml"),t(s)])])])]),n("li",null,[F,n("ul",null,[n("li",null,[n("a",L,[a("http://config-3344.com:3344/dev/config-dev.yml"),t(s)])]),n("li",null,[n("a",Q,[a("http://config-3344.com:3344/dev/config-test.yml"),t(s)])]),n("li",null,[n("a",N,[a("http://config-3344.com:3344/dev/config-prod.yml"),t(s)])])])])]),n("blockquote",null,[n("p",null,[a("逆操作："),n("a",W,[a("http://config-3344.com:3344/config/dev/master"),t(s)])]),H]),O,n("p",null,[a("安装Erlang，下载地址："),n("a",Z,[a("http://erlang.org/download/otp_win64_21.3.exe"),t(s)])]),n("p",null,[a("安装RabbitMQ，下载地址："),n("a",D,[a("https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe"),t(s)])]),U,V,n("p",null,[a("命令执行完后，可以在开始菜单中找到RabbitMQ Server 下找到可视化插件。我们可以通过"),n("a",Y,[a("http://localhost:15672/查看RabbitMQ是否安装成功，进入后登录页面如下。"),t(s)])]),K,X,$,n("ul",null,[n("li",null,[n("a",J,[a("https://spring.io/projects/spring-cloud-stream#overview"),t(s)])]),n("li",null,[n("a",nn,[a("https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/"),t(s)])]),n("li",null,[a("Spring Cloud Stream中文指导手册："),n("a",an,[a("https://m.wang1314.com/doc/wepapp/topic/20971999.html"),t(s)])])]),sn])}const on=p(u,[["render",tn],["__file","SpringCloud.html.vue"]]);export{on as default};
