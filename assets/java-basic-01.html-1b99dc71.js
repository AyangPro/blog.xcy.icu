import{_ as a,W as e,X as i,Y as h,Z as r,a0 as t}from"./framework-91490e6a.js";const d={},n=r("p",null,"Java基础常见面试题",-1),c=t('<h1 id="java基础常见面试题总结" tabindex="-1"><a class="header-anchor" href="#java基础常见面试题总结" aria-hidden="true">#</a> Java基础常见面试题总结</h1><h3 id="jdk与jre的区别" tabindex="-1"><a class="header-anchor" href="#jdk与jre的区别" aria-hidden="true">#</a> JDK与JRE的区别？</h3><p>Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序</p><h3 id="class文件与二进制文件的区别" tabindex="-1"><a class="header-anchor" href="#class文件与二进制文件的区别" aria-hidden="true">#</a> class文件与二进制文件的区别？</h3><p>class是java通过编译器预编译的一种java的执行文件的存在形式，他本身是二进制文件，但是不能直接执行，需要通过java虚拟机来解释执行</p><h3 id="为什么要使用字节码文件" tabindex="-1"><a class="header-anchor" href="#为什么要使用字节码文件" aria-hidden="true">#</a> 为什么要使用字节码文件？</h3><p>主要原因是为了跨平台，只要在不同的操作系统上安装了java的运行环境，然后就可以在任一的平台上通过编译器编译为class文件后再其他的装有java运行环境的平台上运行了</p><h3 id="java是解释性语言还是编译性语言" tabindex="-1"><a class="header-anchor" href="#java是解释性语言还是编译性语言" aria-hidden="true">#</a> java是解释性语言还是编译性语言？</h3><p>由于java语言跨平台的特性，虽然java也需要编译，编译成.class文件，但是并不是机器可以识别的语言，而是字节码，最终还是需要 jvm的解释，才能在各个平台执行，如果单说java语言是编译性和解释性共有的。</p><h3 id="java的基本数据类型" tabindex="-1"><a class="header-anchor" href="#java的基本数据类型" aria-hidden="true">#</a> java的基本数据类型？</h3><p>byte（1）、short（2）、int（4）、long（8）、float（4）、double（8）、char（2）、boolean（1）</p><h3 id="为什么要有包装类" tabindex="-1"><a class="header-anchor" href="#为什么要有包装类" aria-hidden="true">#</a> 为什么要有包装类？</h3><p>java本身秉承着万物皆对象，但是其中有八个基本数据类型却与对象格格不入。它们不具备对象的特性，因此为每个基本数据类型出了包装类</p><h3 id="自动拆箱与自动装箱" tabindex="-1"><a class="header-anchor" href="#自动拆箱与自动装箱" aria-hidden="true">#</a> 自动拆箱与自动装箱</h3><p>自动拆箱指由基本数据类型的包装类转为对象基本数据类型</p><p>自动拆箱指由基本数据类型转为对应的包装类</p><h3 id="int的自动装箱有几种" tabindex="-1"><a class="header-anchor" href="#int的自动装箱有几种" aria-hidden="true">#</a> int的自动装箱有几种？</h3><p>=、new</p><h3 id="int的表示范围" tabindex="-1"><a class="header-anchor" href="#int的表示范围" aria-hidden="true">#</a> int的表示范围</h3><p>int占4个字节（8位），范围：-2^31 ~ 2^31 - 1</p><h3 id="java中如何表示精确的数字" tabindex="-1"><a class="header-anchor" href="#java中如何表示精确的数字" aria-hidden="true">#</a> java中如何表示精确的数字</h3><p>使用BigDecimal</p><h3 id="string定义的字符串长度有限制吗" tabindex="-1"><a class="header-anchor" href="#string定义的字符串长度有限制吗" aria-hidden="true">#</a> String定义的字符串长度有限制吗？</h3><p>有，具体范围时65535，也就是int的表示范围</p><h3 id="switch支持哪些类型" tabindex="-1"><a class="header-anchor" href="#switch支持哪些类型" aria-hidden="true">#</a> Switch支持哪些类型？</h3><p>String、enum、int、char</p><h3 id="java的运行时区域有哪些" tabindex="-1"><a class="header-anchor" href="#java的运行时区域有哪些" aria-hidden="true">#</a> java的运行时区域有哪些？</h3><p>方法区,堆,虚拟机栈,本地方法区,程序计数器</p><p>方法区和堆是所有线程共享的，而后面三个是线程独享的</p><h3 id="堆和栈的区别" tabindex="-1"><a class="header-anchor" href="#堆和栈的区别" aria-hidden="true">#</a> 堆和栈的区别？</h3><ol><li><p>申请方式的不同。栈由系统自动分配，而堆是人为申请开辟</p></li><li><p>申请大小的不同。栈获得的空间较小，而堆获得的空间较大</p></li><li><p>申请效率的不同。栈由系统自动分配，速度较快，而堆一般速度比较慢</p></li><li><p>存储内容的不同。栈在函数调用时，函数调用语句下一条可执行语句的地址第一个进栈，然后函数的各个参数进栈，其中静态变量是不入栈的。而堆一般是在头部用一个字节存放堆的大小，堆中的具体内容是人为安排;</p></li><li><p>底层不同。栈是连续的空间，而堆是不连续的空间</p></li></ol><blockquote><p>堆与栈的区别有：1、栈由系统自动分配，而堆是人为申请开辟；2、栈获得的空间较小，而堆获得的空间较大；3、栈由系统自动分配，速度较快，而堆一般速度比较慢；4、栈是连续的空间，而堆是不连续的空间.</p></blockquote><h3 id="是否可以在static环境中访问非static变量" tabindex="-1"><a class="header-anchor" href="#是否可以在static环境中访问非static变量" aria-hidden="true">#</a> 是否可以在static环境中访问非static变量？</h3><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上</p><h3 id="接口与抽象类的区别" tabindex="-1"><a class="header-anchor" href="#接口与抽象类的区别" aria-hidden="true">#</a> 接口与抽象类的区别？</h3><ul><li><p>抽象类可以存在普通成员方法， 而接口只能存在public abstract 方法</p></li><li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的</p></li><li><p>抽象类只能继承一个，接口可以实现多个</p></li></ul>',36);function s(l,p){return e(),i("div",null,[n,h(" more "),c])}const v=a(d,[["render",s],["__file","java-basic-01.html.vue"]]);export{v as default};
