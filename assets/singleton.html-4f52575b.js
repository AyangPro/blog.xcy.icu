import{_ as s,W as a,X as e,Y as t,Z as n,$ as o,a0 as p}from"./framework-91490e6a.js";const c={},l=n("p",null,[n("code",null,"more"),o(" Mybatis知识体系。")],-1),i=p(`<h1 id="单例设计模式" tabindex="-1"><a class="header-anchor" href="#单例设计模式" aria-hidden="true">#</a> 单例设计模式</h1><h2 id="线程非安全" tabindex="-1"><a class="header-anchor" href="#线程非安全" aria-hidden="true">#</a> 线程非安全</h2><h2 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h2><p>双重判断+synchronized+volatile关键字实现线程安全的单例设计模式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使采用了volatile关键字来保证了禁止指令重排，以及synchronized锁，但是依然可能出现破坏单例的情况，比如说反射会破坏单例设计模式</p><h2 id="枚举实现单例设计模式" tabindex="-1"><a class="header-anchor" href="#枚举实现单例设计模式" aria-hidden="true">#</a> 枚举实现单例设计模式</h2><p>枚举可以从JVM层面保证单例是线程安全的，因为枚举在创建的时候会通过JVM中的ClassLoad的loadClass方法加载，此方法中采用了 synchronized锁，所以说天生就是线程安全的，而且不会被反射破坏单例，因此枚举可以作为最终方案。</p>`,8);function u(d,r){return a(),e("div",null,[l,t(" more "),i])}const v=s(c,[["render",u],["__file","singleton.html.vue"]]);export{v as default};
