import{_ as a,W as e,X as r,Y as i,Z as t,a0 as d}from"./framework-91490e6a.js";const h={},n=t("p",null,"Java基础常见面试题-IO",-1),o=d('<h1 id="javaio常见面试题总结" tabindex="-1"><a class="header-anchor" href="#javaio常见面试题总结" aria-hidden="true">#</a> JavaIO常见面试题总结</h1><h3 id="字符流、字节流" tabindex="-1"><a class="header-anchor" href="#字符流、字节流" aria-hidden="true">#</a> 字符流、字节流</h3><h4 id="字节与字符" tabindex="-1"><a class="header-anchor" href="#字节与字符" aria-hidden="true">#</a> 字节与字符</h4><p>Bit是最小的二进制单位，是计算机的操作部分，取值为0或1</p><p>Byte（字节）是计算机操作数据的最小单位由8位bit组成，取值为-128-127</p><p>Char（字符）用户可读写的最小单位，在java中由16位bit组成，取值0-65535</p><p><strong>字节流</strong></p><p>操作 byte 类型数据，主要操作类是 OutputStream、InputStream 的子类；不用缓冲区，直接对文件本身操作</p><p><strong>字符流</strong></p><p>操作字符类型数据，主要操作类是 Reader、Writer 的子类；使用缓冲区缓冲字符， 不关闭流就不会输出任何内容</p><p><strong>转换</strong></p><ul><li>OutputStreamWriter：是 Writer 的子类，将输出的字符流变为字节流，即将一个字 符流的输出对象变为字节流输出对象。</li><li>InputStreamReader：是 Reader 的子类，将输入的字节流变为字符流，即将一个字 节流的输入对象变为字符流的输入对象</li></ul><h3 id="输入流、输出流" tabindex="-1"><a class="header-anchor" href="#输入流、输出流" aria-hidden="true">#</a> 输入流、输出流</h3><p>输入、输出，有一个参照物，参照物就是存储数据的介质。如果是把对象读入到介质中， 这就是输入。从介质中向外读数据，这就是输出。 所以，输入流是把数据写入存储介质的。输出流是从存储介质中把数据读取出来。</p><h4 id="字节流和字符流之间的转换" tabindex="-1"><a class="header-anchor" href="#字节流和字符流之间的转换" aria-hidden="true">#</a> 字节流和字符流之间的转换</h4><ul><li>OutputStreamWriter 是字符流通向字节流的桥梁</li><li>InputStreamReader 是字节流通向字符流的桥梁</li></ul><h3 id="同步、异步" tabindex="-1"><a class="header-anchor" href="#同步、异步" aria-hidden="true">#</a> 同步、异步</h3><p>同步与异步描述的是被调用者的。</p><p>如 A 调用 B： 如果是同步，B 在接到 A 的调用后，会立即执行要做的事。A 的本次调用可以得到结 果。</p><p>如果是异步，B 在接到 A 的调用后，不保证会立即执行要做的事，但是保证会去做，B 在做好了之后会通知 A。A 的本次调用得不到结果，但是 B 执行完之后会通知A</p><h3 id="阻塞、非阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞、非阻塞" aria-hidden="true">#</a> 阻塞、非阻塞</h3><p>阻塞与非阻塞描述的是调用者的。</p><p>如 A 调用 B： 如果是阻塞，A 在发出调用后，要一直等待，等着 B 返回结果。</p><p>如果是非阻塞，A 在发出调用后，不需要等待，可以去做自己的事情</p><h3 id="同步-异步和阻塞-非阻塞之间的区别" tabindex="-1"><a class="header-anchor" href="#同步-异步和阻塞-非阻塞之间的区别" aria-hidden="true">#</a> 同步，异步和阻塞，非阻塞之间的区别</h3><p><code>同步</code>、<code>异步</code>，是描述被调用方的。</p><p><code>阻塞</code>，<code>非阻塞</code>，是描述调用方的。</p><p>同步不一定阻塞，异步也不一定非阻塞。没有必然关系。</p><h3 id="linux5种io模型" tabindex="-1"><a class="header-anchor" href="#linux5种io模型" aria-hidden="true">#</a> Linux5种IO模型</h3><p>阻塞式IO</p><p>非阻塞式IO</p><p>IO复用</p><p>信号驱动IO</p><p>异步IO</p><h3 id="bio、nio和aio的区别、三种io的用法与原理" tabindex="-1"><a class="header-anchor" href="#bio、nio和aio的区别、三种io的用法与原理" aria-hidden="true">#</a> BIO、NIO和AIO的区别、三种IO的用法与原理</h3>',35);function p(c,s){return e(),r("div",null,[n,i(" more "),o])}const u=a(h,[["render",p],["__file","java-io-01.html.vue"]]);export{u as default};
