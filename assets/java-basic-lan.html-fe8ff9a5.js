import{_ as t,W as e,X as p,Y as o,Z as n,$ as c,a1 as l,a0 as s,C as i}from"./framework-91490e6a.js";const u={},r=n("p",null,"Java 基础知识",-1),k=s(`<h1 id="java-基础知识" tabindex="-1"><a class="header-anchor" href="#java-基础知识" aria-hidden="true">#</a> Java 基础知识</h1><h2 id="一、数据类型" tabindex="-1"><a class="header-anchor" href="#一、数据类型" aria-hidden="true">#</a> 一、数据类型</h2><h3 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型" aria-hidden="true">#</a> 1、数据类型</h3><table><thead><tr><th>基本数据类型</th><th>字符位数</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>Byte</td></tr><tr><td>short</td><td>2</td><td>Short</td></tr><tr><td>int</td><td>4</td><td>Integer</td></tr><tr><td>long</td><td>8</td><td>Long</td></tr><tr><td>float</td><td>4</td><td>Float</td></tr><tr><td>double</td><td>8</td><td>Double</td></tr><tr><td>char</td><td>2</td><td>Character</td></tr><tr><td>boolean</td><td>1</td><td>Boolean</td></tr></tbody></table><p>每一种基本数据类型都有自己的包装类，基本数据类型在与对应的包装类型之间赋值会自动完成装箱或者拆箱操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment">//装箱		</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>		<span class="token comment">//拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在基本数据类型与对应的包装类型做比较时，会先将包装类型拆箱后再做比较。</p></blockquote><h3 id="_2、缓存池" tabindex="-1"><a class="header-anchor" href="#_2、缓存池" aria-hidden="true">#</a> 2、缓存池</h3><p>我们知道，如果是基本数据类型，两个变量的值一样，是可以直接比较出结果的，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可如果是两个包装类型进比较，比较的结果却不一样，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">200</span>；
<span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//false</span>
<span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包装类型都是引用类型，所以在采用<code>==</code>去比较时的时候，比较的是对象的地址，而不是对象中的值。</p><p>可如果这样去比较呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
<span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在new Integer()时，一定会创建一个新对象，所以对象之间的比较一定是false，但是如果不再用new一个对象的方式，则使用的是缓存池中的对象，所以比较时得出的结果就是true。</p><p>而如果使用valueOf()方法的话，就是先判断值是否在缓存池中，如果有就直接用，没有则创建一个。</p><blockquote><p>注意：缓存池并不是无限制缓存的，基本数据类型对应的缓存池大小如下：</p><ul><li>boolean：只有true和false</li><li>short：-128~127之间</li><li>int：-128~127之间</li><li>char：在\\u0000到\\u007F之间</li></ul><p>浮点类型因为精度问题，没有缓存池</p></blockquote><h2 id="二、string类" tabindex="-1"><a class="header-anchor" href="#二、string类" aria-hidden="true">#</a> 二、String类</h2><p>String类是一个操作字符串的类，在开发中我们经常需要操作字符串，所以这个类是很关键的。</p><p>String类比较特殊，它是一个不可变的类：</p><ul><li>String类被final关键字修饰，不可被继承，也就不能被重写</li><li>String类中保存字符的char数组也被final关键字修饰，不可改变，而且String类内容并没有提供直接修改char数组的方法</li></ul><p>上面两点保证了String类的不可变性，因为String类的不可变性，所以每次字符串操作完之后，其实是创建了一个新的字符串对象。</p><p>String类不可变的好处：</p><ul><li>安全性：String类常常用来保存一些敏感数据，不可变，就可以保证数据传输时不可改变，也就保证了数据的安全性</li><li>线程安全：因为每次操作String类对象都是创建一个新的对象，所以String类天生就是线程安全的</li></ul><h3 id="_1、字符串常量池" tabindex="-1"><a class="header-anchor" href="#_1、字符串常量池" aria-hidden="true">#</a> 1、字符串常量池</h3><p>当然，如果我们经常操作字符串，那么就会产生很多的字符串对象，十分的占用内存开销，所以java中提供了一个字符串常量池的概念。主要的作用就是缓存字符串，如果一个字符串已经创建过了，那么下一次就直接从常量池中去获取，不会再创建一次了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> x <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> y <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//true</span>
<span class="token class-name">String</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//false</span>
<span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> abc <span class="token operator">=</span> ab <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>abc <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
<span class="token class-name">String</span> strA <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strA <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建字符串变量x时，会创建一个字符串abc，并将abc保存在字符串常量池中，之后创建字符串变量y时，先去字符串常量池中寻找字符串abc，找到之后直接赋值给y，所以x与y使用的是同一个字符串对象，结果为true。</p><p>之后通过new创建了一个新对象z，创建时会先去字符串常量池中寻找字符串abc，找到之后赋值给z，但是因为是new，所以同时还会再堆中创建一个引用对象，所以z的地址与字符串abc的地址不同，结果为false。</p><p>字符串如果是直接拼接的字面量，则会认为是一个字符串，那么就会去字符串常量池中去寻找，可如果是拼接时涉及到了其他对象，那么就无法确定该字符串的值，也就不会去字符串常量池寻找，而是直接创建一个新的字符串。</p><blockquote><p>注意：在字符串操作时，如果操作的次数比较多，那么还是建议使用StringBuffer类去进行字符串操作，StringBuffer类中提供了对字符串操作的方法，同时不会产生新的对象。如果涉及到了多线程，可以采用StringBuilder类操作字符串。String类在进行字符串操作时，底层调用的依然是StringBuffer类中的方法，所以每次操作都会创建一个StringBuffer类对象。</p></blockquote><h3 id="_2、string、stringbuffer、stringbuilder" tabindex="-1"><a class="header-anchor" href="#_2、string、stringbuffer、stringbuilder" aria-hidden="true">#</a> 2、String、StringBuffer、StringBuilder</h3><p>可变性：</p><ul><li>String不可变</li><li>StringBuffer和StringBuilder可变</li></ul><p>线程安全：</p><ul><li>String不可变，因此线程安全</li><li>StringBuffer线程不安全</li><li>StringBuilder内部使用了synchronized关键字保证了线程安全</li></ul>`,37),d={href:"https://stackoverflow.com/questions/2971315/string-stringbuffer-and-stringbuilder",target:"_blank",rel:"noopener noreferrer"},v=s(`<h2 id="三、object通过方法" tabindex="-1"><a class="header-anchor" href="#三、object通过方法" aria-hidden="true">#</a> 三、Object通过方法</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>

<span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1、equals" tabindex="-1"><a class="header-anchor" href="#_1、equals" aria-hidden="true">#</a> 1、equals()</h3><p>对于引用类型， equals() 判断引用的对象是否等价。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、hashcode" tabindex="-1"><a class="header-anchor" href="#_2、hashcode" aria-hidden="true">#</a> 2、hashCode()</h3><p>hashCode()方法返回散列值，而equals()是用来判断两个对象是否等价。等价的两个对象的散列值一定相同，但是散列值相等的两个对象不一定等价。</p><p>简而言之就是说，equals()相同的，hashCode()一定相同，而hashCode()相同的，equals()不一定相同。</p><blockquote><p>注意：如果重写了equals()方法，那么就需要重新hashCode()方法，让二者始终保持上述的联动关系。</p></blockquote><h3 id="_3、tostring" tabindex="-1"><a class="header-anchor" href="#_3、tostring" aria-hidden="true">#</a> 3、toString()</h3><p>toString()方法也是开发中经常用到的方法，主要作用就是将对象转为String类的对象。</p><h3 id="_4、clone" tabindex="-1"><a class="header-anchor" href="#_4、clone" aria-hidden="true">#</a> 4、clone()</h3><p>clone()是Object类中被protected方法，不是public，如果一个类没有显式的去重写clone()，那么其他的类就不能直接调用该类的clone()。</p><p><strong>深拷贝与浅拷贝</strong></p><p>数据类型分为基本数据类型和引用数据类型，基本数据类型的是直接在栈中存储数据的，而引用数据类型则是在栈中存放一个地址，这个地址指向堆中的的数据。</p><p>引用数据类型在栈中只存放了堆中对象的地址，解释器拿到栈中的地址后，就会去堆中获取对象实体。</p><p>无论是浅拷贝还是深拷贝都是针对引用数据类型的。</p><p>浅拷贝只是复制了栈中的地址，不是复制了对象本身，拷贝前和拷贝后的对象都是引用的同一个对象。</p><p>深拷贝则是复制了一个新的对象，拷贝前和拷贝后的对象不共享内存，修改对象也不会影响到另一个对象。</p><h2 id="四、关键字" tabindex="-1"><a class="header-anchor" href="#四、关键字" aria-hidden="true">#</a> 四、关键字</h2><h3 id="_1、static" tabindex="-1"><a class="header-anchor" href="#_1、static" aria-hidden="true">#</a> 1、static</h3><p><strong>静态变量</strong></p><ul><li>静态变量：静态变量又被成为类变量，也就是说静态变量是属于类的，类的所有实例都共享这个变量，可以直接通过类名访问它，静态变量只在内存中存在一份。</li><li>实例变量：每创建一个实例就会产生一个变量，这个变量只属于创建的实例，与其他实例无关。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>			<span class="token comment">//实例变量</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>	<span class="token comment">//静态变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>静态方法</strong></p><ul><li><p>静态方法在类加载的时候就存在了，它不依赖任何实例。所以静态方法必须有实例，也就说它不能是抽象方法。</p></li><li><p>静态方法内部只能访问静态方法、静态变量、方法中不能有this和super关键字。</p><blockquote><p>注意：静态方法在类加载时就存在了，但是普通方法是在实例创建后才存在的，所以说在静态方法中不能直接调用普通方法，必须创建实例之后才能调用普通方法。</p></blockquote></li></ul><p><strong>静态代码块</strong></p><ul><li><p>静态代码块只在类创建时执行一次，之后将不再执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    
	<span class="token keyword">static</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">A</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//结果：abc</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：静态代码块只会执行一次，之后无论创建多少实例，都不会再执行。</p></blockquote></li></ul><p><strong>静态内部类</strong></p><p>非静态的内部类依赖于外部类的实例，但是静态内部类不依赖外部类实例，静态内部类不能访问外部类的非静态变量和方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">B</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化顺序</strong></p><p>静态变量和静态代码块优先初始化，之后是普通变量和普通代码块，静态变量和静态代码块的顺去取决于代码中的顺序，最后才是构造方法的初始化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> staticField <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> filed <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：存在继承的情况下，初始化顺序为：</p><ol><li><p>父类静态变量、静态代码块</p></li><li><p>子类静态变量、静态代码块</p></li><li><p>父类实例变量、实例代码块</p></li><li><p>父类构造函数</p></li><li><p>子类实例变量、普通代码块</p></li><li><p>子类构造方法</p></li></ol></blockquote><h3 id="_2、final" tabindex="-1"><a class="header-anchor" href="#_2、final" aria-hidden="true">#</a> 2、final</h3><ul><li><p>被final修饰的类不能被继承</p></li><li><p>被final修饰的方法不能被重写，private修饰的方法被隐式的指定为final</p></li><li><p>被final修饰的变量将变成常量，如果是基本数据类型，那么数值将不可改变；如果是引用类型，那么引用不变，也就是说不能引用其他对象，但是依然可以修改引用对象本身</p></li></ul>`,37);function m(b,g){const a=i("ExternalLinkIcon");return e(),p("div",null,[r,o(" more "),k,n("p",null,[n("a",d,[c("java - String, StringBuffer, and StringBuilder - Stack Overflow"),l(a)])]),v])}const y=t(u,[["render",m],["__file","java-basic-lan.html.vue"]]);export{y as default};
