import{_ as a,W as n,X as s,Y as e,Z as t,a0 as p}from"./framework-91490e6a.js";const i={},o=t("p",null,"面试1",-1),l=p(`<h1 id="面试1" tabindex="-1"><a class="header-anchor" href="#面试1" aria-hidden="true">#</a> 面试1</h1><h2 id="笔试" tabindex="-1"><a class="header-anchor" href="#笔试" aria-hidden="true">#</a> 笔试：</h2><p>两个基础题：考验基础语法</p><p>判断结果：考验静态变量</p><p>写个sql查询语句：考验分组查询，聚合函数</p><p>mysql如何查看一条sql语句的执行效率</p><p>如何解决跨域？</p><p>如何设计一个监控插入数据的，输出日志的功能？（考验aop）</p><p>所有程序会发生异常的父类</p><p>有几个基本选择题</p><h2 id="面试" tabindex="-1"><a class="header-anchor" href="#面试" aria-hidden="true">#</a> 面试：</h2><h3 id="springboot的工程结构-有哪些包" tabindex="-1"><a class="header-anchor" href="#springboot的工程结构-有哪些包" aria-hidden="true">#</a> SpringBoot的工程结构（有哪些包？）</h3><h3 id="你所写的这些controller层、service层、dao层是如何注入spring容器" tabindex="-1"><a class="header-anchor" href="#你所写的这些controller层、service层、dao层是如何注入spring容器" aria-hidden="true">#</a> 你所写的这些controller层、service层、dao层是如何注入spring容器</h3><ul><li>controller层通过注解@Controller可以完成注入</li><li>service层通过注解@Service可以完成注入</li><li>dao层通过@Repository可以完成注入</li></ul><h3 id="还有哪些注入bean的方式" tabindex="-1"><a class="header-anchor" href="#还有哪些注入bean的方式" aria-hidden="true">#</a> 还有哪些注入bean的方式</h3><ul><li>还可以通过@Component</li></ul><h3 id="你通常会在springboot配置文件中配置哪些信息" tabindex="-1"><a class="header-anchor" href="#你通常会在springboot配置文件中配置哪些信息" aria-hidden="true">#</a> 你通常会在SpringBoot配置文件中配置哪些信息</h3><p>配置像数据库连接的相关信息，Mybatis全局配置，Redis的连接信息，端口号之类，也可以通过配置文件配置其他使用的相关技术的一些配置，这个东西就比较多了</p><h3 id="如何去读取一些配置文件的信息" tabindex="-1"><a class="header-anchor" href="#如何去读取一些配置文件的信息" aria-hidden="true">#</a> 如何去读取一些配置文件的信息</h3><p>可以通过注解@Value来读取配置文件中的配置信息:</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;$(name)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过java中的Properties类来获取配置文件中的信息:</p><p>或者通过通过类加载器获取:</p><p>也可以利用InputStream从文件中读取:</p><h3 id="前后端分离的话-你是怎么让一个接口返回一个json数据" tabindex="-1"><a class="header-anchor" href="#前后端分离的话-你是怎么让一个接口返回一个json数据" aria-hidden="true">#</a> 前后端分离的话，你是怎么让一个接口返回一个json数据</h3><p>可以通过第三方类库来完成， 也可以通过自定义一个工具类，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装好返回前端的json类后，通过在controller层的方法上添加@RequestBody注解即可在返回时返回json数据， 也可以直接在controller层的类上添加@RestController注解，但是RestController表示当前类中的所有方法都默认添加了@RequestBody注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@RestController</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/test&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端接收到的json数据</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型有什么好处" tabindex="-1"><a class="header-anchor" href="#泛型有什么好处" aria-hidden="true">#</a> 泛型有什么好处？</h3><ul><li>消除强制类型的转换</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种原始的方式虽然可以存储各种类型，但是存进去就变成了Object类型的了，往往需要进行强制转换，这很不安全，可能会出错。 采用泛型则可以在List中指定类型，比如<code>List&lt;String&gt;</code>只能传入字符串类型的数据。</p><ul><li>类型安全 类型错误在编译期就可以被识别出来，类型安全检查机制提高了程序的可靠性</li></ul><h3 id="spring怎么控制事务的呢" tabindex="-1"><a class="header-anchor" href="#spring怎么控制事务的呢" aria-hidden="true">#</a> spring怎么控制事务的呢？</h3><p>通过编程式事务和声明式事务吧</p><h3 id="事务的传播机制呢" tabindex="-1"><a class="header-anchor" href="#事务的传播机制呢" aria-hidden="true">#</a> 事务的传播机制呢？</h3><p>一共有七中：</p><ul><li>支持事务的有三种； <ul><li>propagation_required:如果有事务就加入该事务，没有则创建一个事务</li><li>propagation_supports:如果有事务则加入该事务，没有则以非事务的方式继续运行</li><li>propagation_mandatory:如果有事务则加入该事务，没有则抛出异常</li></ul></li><li>不支持事务的有三种： <ul><li>propagation_required_new:创建一个事务，如果有事务则把当前事务挂起</li><li>propagation_not_supported:以非事务的方式运行，如果有事务则把当前事务挂起</li><li>propagation_never:以非事务的方式运行，如果有事务则抛出异常</li></ul></li><li>其他 <ul><li>propagation_nested:如果当前存在事务，则创建一个事务作为嵌套事务运行；如果没有事务，则创建一个事务</li></ul></li></ul><h3 id="一个设计事务的问题-考验使用哪种传播机制" tabindex="-1"><a class="header-anchor" href="#一个设计事务的问题-考验使用哪种传播机制" aria-hidden="true">#</a> 一个设计事务的问题（考验使用哪种传播机制）</h3><h3 id="mybatis-plus分页是怎么做的" tabindex="-1"><a class="header-anchor" href="#mybatis-plus分页是怎么做的" aria-hidden="true">#</a> mybatis-plus分页是怎么做的？</h3><p>mybatis-plus其实是通过拦截器完成分页的，和pageHelper分页插件类似。</p><p>都是在拦截器中通过重写sql语句完成分页，这种分页都是通过重写sql完成的，所以都是物理分页。</p><h3 id="mybatis自己写sql时候-xml中的这些标签查询语句怎么和dao中的方法对应的" tabindex="-1"><a class="header-anchor" href="#mybatis自己写sql时候-xml中的这些标签查询语句怎么和dao中的方法对应的" aria-hidden="true">#</a> mybatis自己写sql时候，xml中的这些标签查询语句怎么和dao中的方法对应的？</h3><p>通过标签的中的id来完成，让标签中的id与dao中的方法名称对应即可。</p><h3 id="返回结果集是怎么对应的" tabindex="-1"><a class="header-anchor" href="#返回结果集是怎么对应的" aria-hidden="true">#</a> 返回结果集是怎么对应的？</h3><p>可以设置resultType属性，比如说一个表是user表，在java代码中User实体类，就可以在mybatis中的xml文件中通过resultType=User来完成。</p><h3 id="我怎么去构建一个一对多的查询" tabindex="-1"><a class="header-anchor" href="#我怎么去构建一个一对多的查询" aria-hidden="true">#</a> 我怎么去构建一个一对多的查询？</h3><p>可以通过collection标签，也可以通过分步查询。</p><h3 id="动态拼接sql呢-有了解过吗" tabindex="-1"><a class="header-anchor" href="#动态拼接sql呢-有了解过吗" aria-hidden="true">#</a> 动态拼接sql呢，有了解过吗？</h3><p>动态拼接sql是通过mybatis中提供的动态拼接的一些标签完成的，比如if，when，choose等。这些标签可以通过判断， 提供动态拼接sql的功能，让sql语句更加灵活，可以适用于一些复杂的业务场景。</p><h3 id="mysql左连接和右连接了解吗" tabindex="-1"><a class="header-anchor" href="#mysql左连接和右连接了解吗" aria-hidden="true">#</a> mysql左连接和右连接了解吗？</h3><ul><li>左连接：左表和右表中满足条件的查出来，同时会把左表中不满足条件的也查出来</li><li>右连接：右表和左表中满足条件的查出来，同时会把右表中不满足条件的也查出来</li></ul><h3 id="左表10条-右表8条-有一个字段关联-左连接最多有几条-最少有几条" tabindex="-1"><a class="header-anchor" href="#左表10条-右表8条-有一个字段关联-左连接最多有几条-最少有几条" aria-hidden="true">#</a> 左表10条，右表8条，有一个字段关联，左连接最多有几条，最少有几条？</h3><p>10条，最多最少都是10条，左连接就是左表全查</p><h3 id="你能举例aop的应用场景吗" tabindex="-1"><a class="header-anchor" href="#你能举例aop的应用场景吗" aria-hidden="true">#</a> 你能举例aop的应用场景吗？</h3><p>日志功能，统计，权限，性能监控等（大概是问@Around环绕通知底层逻辑（不会））</p><h3 id="集合都有哪些类" tabindex="-1"><a class="header-anchor" href="#集合都有哪些类" aria-hidden="true">#</a> 集合都有哪些类？</h3><p>常见的集合类都是继承与Collection接口或者Map接口的，Collection接口下有三个子接口，分别是List，Set，Queue</p><ul><li>List常用的实现子类有ArrayList,LinkedList等；</li><li>Set常用的实现子类有HashSet,TreeSet等；</li><li>Queue常用的实现子类有LinkedList,ArrayDeque等；LinkedList实现了Deque接口，而Deque接口继承与Queue接口，而Queue接口代表队列，所以LinkedList也常被当做队列或者栈使用</li><li>Map常用的实现子类有HashMap,TreeMap,LinkedHashMap等</li><li>如果涉及到了线程安全问题，也可以使用Collections包中提供的包装类，但是性能较差，也可以使用concurrent包下的集合类，此包下的集合类线程安全且性能好</li></ul><h3 id="linkedlist底层数据结构" tabindex="-1"><a class="header-anchor" href="#linkedlist底层数据结构" aria-hidden="true">#</a> LinkedList底层数据结构？</h3><p>双向链表</p><h3 id="双向链表底层是怎么实现的-数据结构的知识" tabindex="-1"><a class="header-anchor" href="#双向链表底层是怎么实现的-数据结构的知识" aria-hidden="true">#</a> 双向链表底层是怎么实现的？（数据结构的知识）</h3><p>每一个节点中有数据，前驱和后驱，前驱指向前一个节点，后驱指向后一个节点</p><h3 id="链表删除一条数据的话底层怎么实现的-前后指针怎指向的" tabindex="-1"><a class="header-anchor" href="#链表删除一条数据的话底层怎么实现的-前后指针怎指向的" aria-hidden="true">#</a> 链表删除一条数据的话底层怎么实现的？（前后指针怎指向的？）</h3><p>让下一个节点的前驱指向前一个节点，前一个节点的后驱指向下一个节点， 比如A-B-C，让C节点的前驱指向A节点，A节点的后驱指向C节点，这样B节点就从链表中删除了</p><h3 id="你用过dubbo、nacos-讲讲你是怎么用的" tabindex="-1"><a class="header-anchor" href="#你用过dubbo、nacos-讲讲你是怎么用的" aria-hidden="true">#</a> 你用过dubbo、nacos，讲讲你是怎么用的？</h3><h3 id="你有注意到过dubbo传输对象是要进行序列化的吗" tabindex="-1"><a class="header-anchor" href="#你有注意到过dubbo传输对象是要进行序列化的吗" aria-hidden="true">#</a> 你有注意到过dubbo传输对象是要进行序列化的吗？</h3><h3 id="序列化uid的作用" tabindex="-1"><a class="header-anchor" href="#序列化uid的作用" aria-hidden="true">#</a> 序列化uid的作用？</h3><h3 id="你有考虑过分布式事务这个问题吗-我还没学到" tabindex="-1"><a class="header-anchor" href="#你有考虑过分布式事务这个问题吗-我还没学到" aria-hidden="true">#</a> 你有考虑过分布式事务这个问题吗？（我还没学到）</h3><h3 id="我看有用到这些第三方组件-服务-你是怎么学习的" tabindex="-1"><a class="header-anchor" href="#我看有用到这些第三方组件-服务-你是怎么学习的" aria-hidden="true">#</a> 我看有用到这些第三方组件（服务），你是怎么学习的？</h3><h3 id="redis有哪些数据结构" tabindex="-1"><a class="header-anchor" href="#redis有哪些数据结构" aria-hidden="true">#</a> redis有哪些数据结构？</h3><ul><li>String：字符串</li><li>List：链表，每个节点都是一个字符串</li><li>Set：不可重复的集合，每个集合点都是一个字符串</li><li>ZSet：排序集合，内部有分数，可以通过分数进行排序</li><li>Hash：key-value类型的映射关系的集合</li></ul><h3 id="zset的应用场景" tabindex="-1"><a class="header-anchor" href="#zset的应用场景" aria-hidden="true">#</a> ZSet的应用场景？</h3><p>排行榜</p><h3 id="之前有没有过面试" tabindex="-1"><a class="header-anchor" href="#之前有没有过面试" aria-hidden="true">#</a> 之前有没有过面试？</h3><h3 id="现在是住在哪" tabindex="-1"><a class="header-anchor" href="#现在是住在哪" aria-hidden="true">#</a> 现在是住在哪？</h3><h3 id="基本情况-今年毕业-四五月份还要回去一趟-回去几天" tabindex="-1"><a class="header-anchor" href="#基本情况-今年毕业-四五月份还要回去一趟-回去几天" aria-hidden="true">#</a> 基本情况，今年毕业？四五月份还要回去一趟？回去几天？</h3><h3 id="学校是在-老家是在" tabindex="-1"><a class="header-anchor" href="#学校是在-老家是在" aria-hidden="true">#</a> 学校是在？老家是在？</h3><h3 id="你还有什么问题要问我的吗" tabindex="-1"><a class="header-anchor" href="#你还有什么问题要问我的吗" aria-hidden="true">#</a> 你还有什么问题要问我的吗？</h3><h2 id="反问-如果能通过对的话-实习生日常都做些什么" tabindex="-1"><a class="header-anchor" href="#反问-如果能通过对的话-实习生日常都做些什么" aria-hidden="true">#</a> 反问： 如果能通过对的话，实习生日常都做些什么？</h2><h3 id="公司都做什么业务" tabindex="-1"><a class="header-anchor" href="#公司都做什么业务" aria-hidden="true">#</a> 公司都做什么业务？</h3><h3 id="您觉得我的水平怎么样" tabindex="-1"><a class="header-anchor" href="#您觉得我的水平怎么样" aria-hidden="true">#</a> 您觉得我的水平怎么样？</h3><p>再见。</p>`,87);function c(r,d){return n(),s("div",null,[o,e(" more "),l])}const h=a(i,[["render",c],["__file","Interview-review-1.html.vue"]]);export{h as default};
