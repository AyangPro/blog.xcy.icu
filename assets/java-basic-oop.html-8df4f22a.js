import{_ as a,W as s,X as n,Y as t,Z as e,a0 as p}from"./framework-91490e6a.js";const l={},i=e("p",null,"Java 面向对象",-1),c=p(`<h1 id="java-面向对象" tabindex="-1"><a class="header-anchor" href="#java-面向对象" aria-hidden="true">#</a> Java 面向对象</h1><h2 id="一、面向对象与面向过程" tabindex="-1"><a class="header-anchor" href="#一、面向对象与面向过程" aria-hidden="true">#</a> 一、面向对象与面向过程</h2><table><thead><tr><th></th><th>面向对象</th><th>面向过程</th></tr></thead><tbody><tr><td>设计思路</td><td>自底向上、对象化、综合</td><td>自顶向下、层次化、分解</td></tr><tr><td>程序单元</td><td>对象</td><td>函数模块</td></tr><tr><td>设计方法</td><td>程序=算法+数据结构</td><td>程序=对象=数据+方法</td></tr><tr><td>优点</td><td>相互独立，代码共享，性能较高</td><td>接近人的思维，灵活、易维护、扩展、复用</td></tr><tr><td>缺点</td><td>修改、维护困难</td><td>性能较低</td></tr></tbody></table><ul><li>面向对象是将复杂的问题简单化，开发人员无需了解具体的实现过程，只需要关注对象去实现功能</li></ul><h2 id="二、三大特性" tabindex="-1"><a class="header-anchor" href="#二、三大特性" aria-hidden="true">#</a> 二、三大特性</h2><h3 id="_1、封装" tabindex="-1"><a class="header-anchor" href="#_1、封装" aria-hidden="true">#</a> 1、封装</h3><p>利用抽象数据类型数据基于数据的操作封装在一起，使其构成一个不可分割的独立实体。</p><p>数据被保护在抽象的数据类型内部，尽可能的隐藏内容的细节，只保留一个特定的接口或者方法来保证和外界的交互。在使用时，用户不需要知道内部的具体实现细节。</p><p>优点：</p><ul><li>可以提高代码的重用性</li><li>降低耦合度</li><li>更好的调节性能</li><li>降低了构建大型系统的风险</li><li>减轻维护成本</li></ul><h3 id="_2、继承" tabindex="-1"><a class="header-anchor" href="#_2、继承" aria-hidden="true">#</a> 2、继承</h3><p>我认为<strong>继承是一种扩展能力</strong>，子类继承父类，可以拥有父类的一些能力，同时可以使用super关键字调用父类的相关方法，也可以有自己特有方法，这其实是一种对父类的扩展，但又不影响父类本身。</p><p>继承应当遵循<strong>里氏替换</strong>原则，子类可以替换掉父类对象。</p><h3 id="_3、多态" tabindex="-1"><a class="header-anchor" href="#_3、多态" aria-hidden="true">#</a> 3、多态</h3><p>多态分为编译时多态和运行时多态：</p><p>编译时多态：</p><ul><li>一般指方法的重载</li></ul><p>运行时多态：</p><ul><li>程序中的对象引用所指向的具体类型只有在运行期间才能确定</li></ul><p>运行时多态必须具有三个条件：</p><ul><li>必须具有继承关系</li><li>子类对父类的重写</li><li>向上转型</li></ul><p>一般体现在父类的引用指向子类实例，也就是常说的向上转型。</p><p>在开发中我们经常使用到向上转型，尤其是使用集合时，我们会常常用到向上转型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Animail</span> animal  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：</p><ul><li>代码简洁，减少了重复代码</li><li>提高代码的灵活性和可扩展性</li><li>实现了方法的动态绑定（在运行时才确定调用的哪个子类的方法）</li><li>避免一些类型转换错误，向上转型是自动完成的，无需强制转型</li></ul><blockquote><p>注意：转型其实还具有向下转型，但是向下转型具有风险，必须使用强制转型，在开发过程中一般不会采用向下转型。</p></blockquote>`,27);function o(d,r){return s(),n("div",null,[i,t(" more "),c])}const h=a(l,[["render",o],["__file","java-basic-oop.html.vue"]]);export{h as default};
