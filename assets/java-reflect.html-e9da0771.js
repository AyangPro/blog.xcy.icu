const l=JSON.parse('{"key":"v-2c991927","path":"/md/java/reflect/java-reflect.html","title":"Java 反射","lang":"zh-CN","frontmatter":{"icon":"Java","date":"2023-08-05T00:00:00.000Z","category":["Java"],"star":true},"headers":[{"level":1,"title":"Java 反射","slug":"java-反射","link":"#java-反射","children":[{"level":2,"title":"一、反射基础","slug":"一、反射基础","link":"#一、反射基础","children":[{"level":3,"title":"1、Class类","slug":"_1、class类","link":"#_1、class类","children":[]},{"level":3,"title":"2、类加载","slug":"_2、类加载","link":"#_2、类加载","children":[]}]},{"level":2,"title":"二、反射的使用","slug":"二、反射的使用","link":"#二、反射的使用","children":[{"level":3,"title":"1、Class类中的方法","slug":"_1、class类中的方法","link":"#_1、class类中的方法","children":[]},{"level":3,"title":"2、Constructor类及其使用","slug":"_2、constructor类及其使用","link":"#_2、constructor类及其使用","children":[]},{"level":3,"title":"3、Constructor类本身的常用方法：","slug":"_3、constructor类本身的常用方法","link":"#_3、constructor类本身的常用方法","children":[]},{"level":3,"title":"4、Field类及其用法","slug":"_4、field类及其用法","link":"#_4、field类及其用法","children":[]}]},{"level":2,"title":"三、反射机制","slug":"三、反射机制","link":"#三、反射机制","children":[]}]}],"git":{"createdTime":1694621240000,"updatedTime":1694621240000,"contributors":[{"name":"Fu Chen","email":"1727195232@qq.com","commits":1}]},"readingTime":{"minutes":7.44,"words":2232},"filePathRelative":"md/java/reflect/java-reflect.md","localizedDate":"2023年8月5日","excerpt":"<h1> Java 反射</h1>\\n<p>每个类都有一个Class对象，包含了与类有关的信息，当编译一个新类时，会产生一个同名的.class文件，这个文件保存着Class对象。</p>\\n<p>类加载就是Class对象的加载，类在第一次使用时才动态加载到JVM中，我们可以使用Class.forName()的方式来动态控制类的加载，这个方法会返回一个Class对象。</p>\\n<p>反射可以提供运行时的类的信息，同时这个类也可以在运行时载入，甚至在编译期该类的.class文件不存在也可以加载进来。</p>\\n<p>Class和java.lang.reflect一起对反射提供了支持，java.lang.reflect类库主要包含了以下三个类：</p>"}');export{l as data};
